// Generated by nats-rpc. DO NOT EDIT.
package example

import (
	"context"
	"os"
	"os/signal"
	"syscall"

	"github.com/chop-dbhi/nats-rpc/transport"
	"github.com/golang/protobuf/proto"
)

var (
	traceIdKey = struct{}{}
)

type Client interface {
	Service
}

type client struct {
	tp transport.Transport
}

func (c *client) Add(ctx context.Context, req *Req) (*Rep, error) {
	var rep Rep

	_, err := c.tp.Request("example.Add", req, &rep)
	if err != nil {
		return nil, err
	}

	return &rep, nil
}

func NewClient(tp transport.Transport) Client {
	return &client{tp}
}

func Serve(ctx context.Context, tp transport.Transport, svc Service) error {
	ctx, cancel := context.WithCancel(ctx)
	defer func() {
		cancel()
	}()

	var err error

	_, err = tp.Subscribe("example.Add", func(msg *transport.Message) (proto.Message, error) {
		ctx := context.WithValue(ctx, traceIdKey, msg.Id)

		var req Req
		if err := msg.Decode(&req); err != nil {
			return nil, err
		}

		return svc.Add(ctx, &req)
	}, transport.SubscribeQueue("example.svc"))
	if err != nil {
		return err
	}

	sigchan := make(chan os.Signal)
	signal.Notify(sigchan, syscall.SIGINT, syscall.SIGTERM)

	<-sigchan

	return nil
}
